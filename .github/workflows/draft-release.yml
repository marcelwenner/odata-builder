name: 'Draft Release Creation'

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  pull-requests: read

jobs:
  create-draft-release:
    name: 'Create Draft Release'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog generation

      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: 'Install Dependencies'
        run: |
          if npm ci --dry-run > /dev/null 2>&1; then
              npm ci
          else
              npm install
          fi

      - name: 'Determine Next Version'
        id: version
        run: |
          CURRENT_VERSION=$(jq -r '.version' package.json)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Determine version bump type
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            BUMP_TYPE="${{ github.event.inputs.version_bump }}"
          else
            # Auto-determine from commit messages
            COMMITS=$(git log --oneline $(git describe --tags --abbrev=0)..HEAD 2>/dev/null || git log --oneline)
            
            if echo "$COMMITS" | grep -q "BREAKING CHANGE\|!:"; then
              BUMP_TYPE="major"
            elif echo "$COMMITS" | grep -q "^feat"; then
              BUMP_TYPE="minor"
            else
              BUMP_TYPE="patch"
            fi
          fi
          
          echo "bump_type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          
          # Calculate next version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case $BUMP_TYPE in
            major)
              NEXT_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEXT_VERSION="$MAJOR.$((MINOR + 1)).0"
              ;;
            patch)
              NEXT_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
          esac
          
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Current: $CURRENT_VERSION ‚Üí Next: $NEXT_VERSION ($BUMP_TYPE)"

      - name: 'Generate Changelog'
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline --pretty=format:"- %s (%h)" $LAST_TAG..HEAD)
          else
            COMMITS=$(git log --oneline --pretty=format:"- %s (%h)" -10)  # Last 10 commits if no tags
          fi
          
          # Categorize commits
          FEATURES=""
          FIXES=""
          CHORES=""
          BREAKING=""
          
          while IFS= read -r commit; do
            if [[ "$commit" == *"BREAKING CHANGE"* ]] || [[ "$commit" == *"!:"* ]]; then
              BREAKING="$BREAKING$commit\n"
            elif [[ "$commit" == *"feat"* ]]; then
              FEATURES="$FEATURES$commit\n"
            elif [[ "$commit" == *"fix"* ]]; then
              FIXES="$FIXES$commit\n"
            else
              CHORES="$CHORES$commit\n"
            fi
          done <<< "$COMMITS"
          
          # Build changelog
          CHANGELOG="## What's Changed\n\n"
          
          if [ -n "$BREAKING" ]; then
            CHANGELOG="$CHANGELOG### üí• Breaking Changes\n$BREAKING\n"
          fi
          
          if [ -n "$FEATURES" ]; then
            CHANGELOG="$CHANGELOG### ‚ú® New Features\n$FEATURES\n"
          fi
          
          if [ -n "$FIXES" ]; then
            CHANGELOG="$CHANGELOG### üêõ Bug Fixes\n$FIXES\n"
          fi
          
          if [ -n "$CHORES" ]; then
            CHANGELOG="$CHANGELOG### üîß Maintenance\n$CHORES\n"
          fi
          
          CHANGELOG="$CHANGELOG\n**Full Changelog**: https://github.com/nbyx/odata-builder/compare/$LAST_TAG...v${{ steps.version.outputs.next_version }}"
          
          # Save changelog to file (GitHub Actions can't handle multiline outputs well)
          echo -e "$CHANGELOG" > changelog.md
          
          echo "üìù Changelog generated"

      - name: 'Check for Existing Draft'
        id: existing_draft
        run: |
          DRAFT_ID=$(gh release list --json isDraft,tagName,id --jq '.[] | select(.isDraft == true) | .id' | head -1)
          
          if [ -n "$DRAFT_ID" ]; then
            echo "Found existing draft release: $DRAFT_ID"
            echo "draft_exists=true" >> $GITHUB_OUTPUT
            echo "draft_id=$DRAFT_ID" >> $GITHUB_OUTPUT
          else
            echo "No existing draft release found"
            echo "draft_exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Delete Existing Draft'
        if: steps.existing_draft.outputs.draft_exists == 'true'
        run: |
          echo "üóëÔ∏è Deleting existing draft release..."
          gh release delete ${{ steps.existing_draft.outputs.draft_id }} --yes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Create Draft Release'
        run: |
          echo "üéØ Creating draft release for v${{ steps.version.outputs.next_version }}"
          
          gh release create "v${{ steps.version.outputs.next_version }}" \
            --draft \
            --title "Release v${{ steps.version.outputs.next_version }}" \
            --notes-file changelog.md \
            --target main
          
          echo "‚úÖ Draft release created: v${{ steps.version.outputs.next_version }}"
          echo ""
          echo "üîó View at: https://github.com/nbyx/odata-builder/releases"
          echo ""
          echo "üìã Next steps:"
          echo "1. Review the changelog"
          echo "2. Test the changes"
          echo "3. Update package.json version to v${{ steps.version.outputs.next_version }}"
          echo "4. Publish the release from GitHub UI"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}