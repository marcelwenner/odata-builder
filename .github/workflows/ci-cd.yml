name: Workflow

on:
    push:
        tags:
            - 'v*'
        branches:
            - '**'
    pull_request:
        branches:
            - '**'
    workflow_dispatch:

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    pr-checks:
        if: ${{ github.event_name == 'pull_request' }}
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - name: Check branch name
              if: ${{ github.event_name == 'pull_request' }}
              run: |
                  BRANCH_NAME=${{ github.event.pull_request.head.ref }}
                  if [[ ! "$BRANCH_NAME" =~ ^(feature|bugfix|hotfix|dependabot)/.+$ ]]; then
                    echo "Branch name must follow the pattern 'feature/*', 'bugfix/*', or 'hotfix/*'."
                    exit 1
                  fi

            - name: Check for tags in PR
              run: |
                  echo "Checking for tags on all commits in the PR..."
                  git fetch --tags --quiet
                  for COMMIT in $(git rev-list ${{ github.event.pull_request.base.sha }}..${{ github.sha }}); do
                    if git tag --points-at $COMMIT | grep -q .; then
                      echo "Tag found on commit $COMMIT. Tags are not allowed in PRs."
                      exit 1
                    fi
                  done
                  echo "No tags found on any commits in the PR."

            - name: Check for required labels
              run: |
                  echo "Checking for required labels ('ready-for-review' or 'dependencies')..."
                  if ! curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                    https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }} | \
                    jq -e '.labels[].name | select(. == "ready-for-review" or . == "dependencies")' > /dev/null 2>&1; then
                    echo "PR must have either the 'ready-for-review' or 'dependencies' label."
                    exit 1
                  fi

    check-secrets:
        runs-on: ubuntu-latest
        steps:
            - name: Skip for Dependabot
              if: github.actor == 'dependabot[bot]'
              run: echo "Skipping secret verification for Dependabot."

            - name: Verify required secrets
              if: github.actor != 'dependabot[bot]'
              run: |
                  echo "Verifying required secrets..."
                  REQUIRED_SECRETS=("GITHUB_TOKEN" "NPM_TOKEN")
                  for SECRET in "${REQUIRED_SECRETS[@]}"; do
                    if [ -z "${!SECRET}" ]; then
                      echo "Error: Required secret $SECRET is not set."
                      exit 1
                    fi
                  done
                  echo "All required secrets are set."
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
              shell: bash

    test:
        needs: check-secrets
        runs-on: ubuntu-latest
        strategy:
            matrix:
                node-version: [18, 20]
        steps:
            - uses: actions/checkout@v3
            - name: Set up Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ matrix.node-version }}
            - name: Cache Node.js modules
              uses: actions/cache@v3
              with:
                  path: ~/.npm
                  key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-node-${{ matrix.node-version }}-
            - name: Install dependencies
              run: npm ci
            - name: Run tests with coverage
              id: run-tests
              run: npm run test -- --coverage --reporter=json --reporter=default --outputFile=test-results.json

            - name: Generate test summary and coverage
              if: ${{ github.event_name == 'pull_request' }}
              run: |
                  TEST_SUMMARY=$(cat test-results.json | jq -r '{ total: .successes + .failures, passed: .successes, failed: .failures, pass_rate: if (.successes + .failures) > 0 then (.successes / (.successes + .failures) * 100 | round(2)) else 100 end }')
                  echo "TEST_SUMMARY_TOTAL=$(echo "$TEST_SUMMARY" | jq -r '.total')" >> $GITHUB_ENV
                  echo "TEST_SUMMARY_PASSED=$(echo "$TEST_SUMMARY" | jq -r '.passed')" >> $GITHUB_ENV
                  echo "TEST_SUMMARY_FAILED=$(echo "$TEST_SUMMARY" | jq -r '.failed')" >> $GITHUB_ENV
                  echo "TEST_SUMMARY_PASS_RATE=$(echo "$TEST_SUMMARY" | jq -r '.pass_rate')" >> $GITHUB_ENV
                  COVERAGE=$(npm run coverage:ci)
                  echo "COVERAGE<<EOF" >> $GITHUB_ENV
                  echo "$COVERAGE" >> $GITHUB_ENV
                  echo "EOF" >> $GITHUB_ENV

            - name: Post test summary and coverage to PR
              if: ${{ github.event_name == 'pull_request' }}
              uses: marocchino/sticky-pull-request-comment@v2
              with:
                  header: Test Results (Node ${{ matrix.node-version }})
                  message: |
                      ### Test Results (Node ${{ matrix.node-version }})

                      **Summary:**
                      - Total Tests: ${{ env.TEST_SUMMARY_TOTAL }}
                      - Passed: ${{ env.TEST_SUMMARY_PASSED }}
                      - Failed: ${{ env.TEST_SUMMARY_FAILED }}
                      - Pass Rate: **${{ env.TEST_SUMMARY_PASS_RATE }}%**

                      <details><summary>Coverage Details</summary>
                      ```text
                      ${{ env.COVERAGE }}
                      ```
                      </details>
                  operationType: upsert

            - name: Upload full test output as artifact
              if: ${{ github.event_name == 'pull_request' }}
              uses: actions/upload-artifact@v3
              with:
                  name: full-test-output-${{ matrix.node-version }}
                  path: test-results.json

    lint:
        needs: check-secrets
        runs-on: ubuntu-latest
        strategy:
            matrix:
                node-version: [18, 20]
        steps:
            - uses: actions/checkout@v3
            - name: Set up Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ matrix.node-version }}
            - name: Cache Node.js modules
              uses: actions/cache@v3
              with:
                  path: ~/.npm
                  key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-node-${{ matrix.node-version }}-
            - name: Install dependencies
              run: npm ci
            - name: Run linting
              id: eslint-check
              run: npm run lint -- --format json --output-file eslint-results.json
              continue-on-error: true # Allow the workflow to continue even if there are linting errors

            - name: Load ESLint results
              id: load-eslint-results
              if: ${{ github.event_name == 'pull_request' }}
              uses: actions/github-script@v6
              with:
                  script: |
                      const fs = require('fs');
                      const resultsPath = 'eslint-results.json';
                      if (fs.existsSync(resultsPath)) {
                        const rawResults = fs.readFileSync(resultsPath, 'utf8');
                        const results = JSON.parse(rawResults);
                        const annotations = results.flatMap(fileResult =>
                          fileResult.messages.map(message => ({
                            path: fileResult.filePath.substring(process.env.GITHUB_WORKSPACE.length + 1),
                            start_line: message.line,
                            end_line: message.line,
                            start_column: message.column,
                            end_column: message.column,
                            annotation_level: message.severity === 2 ? 'failure' : 'warning',
                            message: `${message.message} (${message.ruleId})`,
                            title: 'ESLint Violation',
                          }))
                        );
                        core.setOutput('eslint_annotations', annotations);
                      } else {
                        core.setOutput('eslint_annotations', []);
                      }

            - name: Post ESLint results to PR
              if: ${{ github.event_name == 'pull_request' && steps.load-eslint-results.outputs.eslint_annotations != '[]' }}
              uses: actions/github-script@v6
              with:
                  script: |
                      const annotations = JSON.parse(core.getOutput('eslint_annotations'));
                      const conclusion = annotations.length > 0 ? 'failure' : 'success';
                      const summary = annotations.length > 0
                        ? `ESLint found ${annotations.length} areas for improvement. See the annotations below for details on how to align with our code style.`
                        : 'ESLint found no issues. Great job keeping the code clean!';

                      await github.rest.checks.create({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        name: 'ESLint Check',
                        head_sha: context.payload.pull_request.head.sha,
                        status: 'completed',
                        conclusion: conclusion,
                        output: {
                          title: 'ESLint Results',
                          summary: summary,
                          annotations: annotations,
                        },
                      });

    audit:
        needs: check-secrets
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - name: Set up Node.js 20
              uses: actions/setup-node@v3
              with:
                  node-version: '20'
            - name: Cache Node.js modules
              uses: actions/cache@v3
              with:
                  path: ~/.npm
                  key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-node-
            - name: Install dependencies
              run: npm ci
            - name: Run audit
              id: npm-audit
              run: npm audit --production --json > npm-audit-results.json
              continue-on-error: true

            - name: Check for audit errors
              id: check-audit-errors
              if: ${{ github.event_name == 'pull_request' }}
              run: |
                  NPM_AUDIT_OUTPUT=$(cat npm-audit-results.json)
                  if [[ -n "$NPM_AUDIT_OUTPUT" && $(echo "$NPM_AUDIT_OUTPUT" | jq '.error.code') ]]; then
                    echo "NPM_AUDIT_HAS_ERRORS=true" >> $GITHUB_ENV
                  else
                    echo "NPM_AUDIT_HAS_ERRORS=false" >> $GITHUB_ENV
                  fi

            - name: Post npm audit results to PR
              if: ${{ github.event_name == 'pull_request' && env.NPM_AUDIT_HAS_ERRORS == 'true' }}
              uses: marocchino/sticky-pull-request-comment@v2
              with:
                  header: NPM Audit Findings
                  message: |
                      ### :warning: NPM Audit Findings :warning:

                      **Important:** npm audit has identified potential security vulnerabilities.

                      Please review the full npm audit log in the workflow run artifacts for detailed information and remediation steps.
                  operationType: upsert

    build:
        needs: [test, lint, audit]
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - name: Set up Node.js 20
              uses: actions/setup-node@v3
              with:
                  node-version: '20'
            - name: Cache Node.js modules
              uses: actions/cache@v3
              with:
                  path: ~/.npm
                  key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-node-
            - name: Cache build outputs
              uses: actions/cache@v3
              with:
                  path: dist/
                  key: ${{ runner.os }}-dist-${{ github.sha }}
                  restore-keys: |
                      ${{ runner.os }}-dist-
            - name: Install dependencies
              run: npm ci
            - name: Build
              run: npm run build
            - name: Prepare package for npm
              run: |
                  cp package.json dist/package.json
                  cp README.md dist/README.md
                  cd dist
                  jq '.main = "odata-builder.js"' package.json > tmp.json && mv tmp.json package.json
                  jq '.module = "odata-builder.esm.js"' package.json > tmp.json && mv tmp.json package.json
                  jq '.types = "odata-builder.d.ts"' package.json > tmp.json && mv tmp.json package.json

            - name: Check if dist directory is empty
              id: check-dist
              run: |
                  if [ -z "$(ls -A dist/)" ]; then
                    echo "No files found in dist directory, failing the job."
                    exit 1
                  fi

            - name: Sanitize ref name
              if: github.event_name == 'push'
              run: |
                  echo "SANITIZED_REF_NAME=${GITHUB_REF_NAME//\//_}" >> $GITHUB_ENV

            - name: Archive build artifacts
              if: github.event_name == 'push'
              uses: actions/upload-artifact@v4
              with:
                  name: dist-${{ github.run_id }}-${{ env.SANITIZED_REF_NAME }}
                  path: dist/

    create-release:
        needs: [build]
        if: startsWith(github.ref, 'refs/tags/') && github.base_ref == 'main'
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - name: Check version consistency
              run: |
                  PACKAGE_VERSION=$(jq -r .version package.json)
                  TAG_VERSION=${GITHUB_REF#refs/tags/v}
                  if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
                    echo "Version mismatch: package.json ($PACKAGE_VERSION) != tag ($TAG_VERSION)"
                    exit 1
                  fi
              env:
                  GITHUB_REF: ${{ github.ref }}
            - name: Generate release notes
              run: |
                  PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^)
                  git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s" > release-notes.md
            - name: Create GitHub Release
              uses: actions/create-release@v1
              with:
                  tag_name: ${{ github.ref_name }}
                  release_name: ${{ github.ref_name }}
                  body_path: ./release-notes.md
                  draft: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    request-approval:
        needs: [create-release]
        if: startsWith(github.ref, 'refs/tags/') && github.base_ref == 'main'
        runs-on: ubuntu-latest
        environment:
            name: production
        steps:
            - name: Wait for approval
              run: echo "Approval required to proceed to the next job. Check the artifacts and approve if everything is okay."

    publish:
        needs: [request-approval]
        if: startsWith(github.ref, 'refs/tags/') && github.base_ref == 'main'
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: dist-${{ github.run_id }}-${{ github.ref_name }}
                  path: dist
            - name: Use Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '20'
                  registry-url: 'https://registry.npmjs.org'
            - name: Publish to NPM
              run: cd dist && npm publish --access public
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
