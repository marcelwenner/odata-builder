name: 'CI/CD Pipeline'

on:
    push:
        branches:
            - '**'
    pull_request:
        branches:
            - '**'
    release:
        types: [published]
    workflow_dispatch:

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    # ============================================================================
    # VERSION CONSISTENCY CHECK (for GitHub GUI releases)
    # ============================================================================
    
    version-check:
        name: 'Version Consistency Check'
        if: github.event_name == 'release'
        runs-on: ubuntu-latest
        timeout-minutes: 5
        outputs:
            version: ${{ steps.validate.outputs.version }}
        steps:
            - name: 'Checkout Code'
              uses: actions/checkout@v4

            - name: 'Validate Version Consistency'
              id: validate
              run: |
                  PACKAGE_VERSION=$(jq -r '.version' package.json)
                  RELEASE_TAG="${{ github.event.release.tag_name }}"
                  TAG_VERSION=${RELEASE_TAG#v}  # Remove 'v' prefix if present
                  
                  echo "üì¶ Package version: $PACKAGE_VERSION"
                  echo "üè∑Ô∏è  Release tag: $RELEASE_TAG"
                  echo "üîç Comparing: '$PACKAGE_VERSION' vs '$TAG_VERSION'"
                  
                  if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
                      echo ""
                      echo "‚ùå VERSION MISMATCH DETECTED!"
                      echo "================================"
                      echo "package.json version: $PACKAGE_VERSION"
                      echo "GitHub release tag:   $TAG_VERSION"
                      echo ""
                      echo "üîß To fix this issue:"
                      echo "1. Update package.json version:"
                      echo "   npm version $TAG_VERSION --no-git-tag-version"
                      echo ""
                      echo "2. Commit and push the change:"
                      echo "   git add package.json"
                      echo "   git commit -m 'Bump version to $TAG_VERSION'"
                      echo "   git push origin main"
                      echo ""
                      echo "3. Delete and recreate the release with the same tag"
                      echo ""
                      exit 1
                  fi
                  
                  # Validate semantic version format
                  if [[ ! "$PACKAGE_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                      echo ""
                      echo "‚ùå INVALID VERSION FORMAT!"
                      echo "========================="
                      echo "Found version: $PACKAGE_VERSION"
                      echo ""
                      echo "üéØ This project requires semantic versioning (MAJOR.MINOR.PATCH)."
                      echo "Examples: 1.0.0, 2.1.5, 10.0.3"
                      echo "Pre-release versions are not supported (e.g., 1.0.0-beta.1)"
                      echo ""
                      echo "üîß To fix:"
                      echo "1. Update to valid semantic version:"
                      echo "   npm version <major|minor|patch> --no-git-tag-version"
                      echo "2. Commit and recreate release"
                      echo ""
                      exit 1
                  fi
                  
                  echo "‚úÖ Version consistency validated: v$PACKAGE_VERSION"
                  echo "üéØ Stable release version confirmed"
                  echo "version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT

    # ============================================================================
    # EXISTING JOBS (Updated dependencies)
    # ============================================================================
    pr-checks:
        if: ${{ github.event_name == 'pull_request' }}
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - name: Check branch name
              if: ${{ github.event_name == 'pull_request' }}
              run: |
                  BRANCH_NAME=${{ github.event.pull_request.head.ref }}
                  if [[ ! "$BRANCH_NAME" =~ ^(feature|bugfix|hotfix|dependabot)/.+$ ]]; then
                    echo "Branch name must follow the pattern 'feature/*', 'bugfix/*', or 'hotfix/*'."
                    exit 1
                  fi

            - name: Check for tags in PR
              run: |
                  echo "Checking for tags on all commits in the PR..."
                  git fetch --tags --quiet
                  for COMMIT in $(git rev-list ${{ github.event.pull_request.base.sha }}..${{ github.sha }}); do
                    if git tag --points-at $COMMIT | grep -q .; then
                      echo "Tag found on commit $COMMIT. Tags are not allowed in PRs."
                      exit 1
                    fi
                  done
                  echo "No tags found on any commits in the PR."

            - name: Check for required labels
              run: |
                  echo "Checking for required labels ('ready-for-review' or 'dependencies')..."
                  if ! curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                    https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }} | \
                    jq -e '.labels[].name | select(. == "ready-for-review" or . == "dependencies")' > /dev/null 2>&1; then
                    echo "PR must have either the 'ready-for-review' or 'dependencies' label."
                    exit 1
                  fi

    check-secrets:
        runs-on: ubuntu-latest
        steps:
            - name: Skip for Dependabot
              if: github.actor == 'dependabot[bot]'
              run: echo "Skipping secret verification for Dependabot."

            - name: Verify required secrets
              if: github.actor != 'dependabot[bot]'
              run: |
                  echo "Verifying required secrets..."
                  REQUIRED_SECRETS=("GITHUB_TOKEN" "NPM_TOKEN")
                  for SECRET in "${REQUIRED_SECRETS[@]}"; do
                    if [ -z "${!SECRET}" ]; then
                      echo "Error: Required secret $SECRET is not set."
                      exit 1
                    fi
                  done
                  echo "All required secrets are set."
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
              shell: bash

            - name: Validate NPM Token Format
              if: github.actor != 'dependabot[bot]'
              run: |
                  if [[ ! "$NPM_TOKEN" =~ ^npm_[A-Za-z0-9]{36}$ ]]; then
                      echo "‚ùå NPM_TOKEN format appears invalid. Expected format: npm_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"
                      echo "Please check your NPM token in repository secrets."
                      exit 1
                  fi
                  echo "‚úÖ NPM_TOKEN format validation passed"
              env:
                  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

    test:
        needs: check-secrets
        runs-on: ubuntu-latest
        strategy:
            matrix:
                node-version: [18, 20, 22, 24]
        steps:
            - uses: actions/checkout@v3
            - name: Set up Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ matrix.node-version }}
            - name: Cache Node.js modules
              uses: actions/cache@v3
              with:
                  path: ~/.npm
                  key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-node-${{ matrix.node-version }}-
            - name: Check for package-lock and package.json consistency
              id: check-lockfile
              run: |
                  if ! npm ci --dry-run > /dev/null 2>&1; then
                      echo "Lockfile and package.json are not in sync. Using 'npm install' instead."
                      echo "USE_INSTALL=true" >> $GITHUB_ENV
                  else
                      echo "USE_INSTALL=false" >> $GITHUB_ENV
                  fi

            - name: Install dependencies
              run: |
                  if [ "$USE_INSTALL" = "true" ]; then
                      npm install
                  else
                      npm ci
                  fi

            - name: Run tests with coverage
              id: run-tests
              run: npm run test -- --coverage --reporter=json --reporter=default --outputFile=test-results.json

            - name: Generate test summary and coverage
              if: ${{ github.event_name == 'pull_request' }}
              run: |
                  TEST_SUMMARY=$(cat test-results.json | jq -r '
                  {
                    "total": (.numTotalTests),
                    "passed": (.numPassedTests),
                    "failed": (.numFailedTests),
                    "pass_rate": (if (.numTotalTests) > 0 then (.numPassedTests / .numTotalTests * 100 | floor) else 100 end)
                  }')
                  echo "TEST_SUMMARY_TOTAL=$(echo "$TEST_SUMMARY" | jq -r '.total')" >> $GITHUB_ENV
                  echo "TEST_SUMMARY_PASSED=$(echo "$TEST_SUMMARY" | jq -r '.passed')" >> $GITHUB_ENV
                  echo "TEST_SUMMARY_FAILED=$(echo "$TEST_SUMMARY" | jq -r '.failed')" >> $GITHUB_ENV

                  PASS_RATE=$(echo "$TEST_SUMMARY" | jq -r '.pass_rate')
                  if (( $(echo "$PASS_RATE == 100" | bc -l) )); then
                    PASS_RATE_ICON="üü¢"
                    TEST_STATUS="‚úÖ All tests passed"
                  else
                    PASS_RATE_ICON="üî¥"
                    TEST_STATUS="‚ùå Tests failed"
                  fi
                  echo "TEST_SUMMARY_PASS_RATE=${PASS_RATE_ICON} ${PASS_RATE}%" >> $GITHUB_ENV
                  echo "TEST_STATUS=${TEST_STATUS}" >> $GITHUB_ENV

            - name: Generate test coverage summary with insights
              if: ${{ github.event_name == 'pull_request' }}
              run: |
                  COVERAGE_OUTPUT=$(npm run coverage:ci | grep "All files" | awk -F'|' '
                    {
                      statements=$2+0;
                      branches=$3+0;
                      functions=$4+0;
                      lines=$5+0;

                      if (statements == 100) statements_insight="üöÄ Excellent coverage!";
                      else if (statements >= 90) statements_insight="‚úÖ Great coverage, keep it up!";
                      else if (statements >= 75) statements_insight="‚ö†Ô∏è Good coverage, but improvements are possible.";
                      else statements_insight="‚ùå Coverage needs improvement.";

                      if (branches == 100) branches_insight="üöÄ Excellent coverage!";
                      else if (branches >= 90) branches_insight="‚úÖ Great coverage, keep it up!";
                      else if (branches >= 75) branches_insight="‚ö†Ô∏è Good coverage, but improvements are possible.";
                      else branches_insight="‚ùå Coverage needs improvement.";

                      if (functions == 100) functions_insight="üöÄ Excellent coverage!";
                      else if (functions >= 90) functions_insight="‚úÖ Great coverage, keep it up!";
                      else if (functions >= 75) functions_insight="‚ö†Ô∏è Good coverage, but improvements are possible.";
                      else functions_insight="‚ùå Coverage needs improvement.";

                      if (lines == 100) lines_insight="üöÄ Excellent coverage!";
                      else if (lines >= 90) lines_insight="‚úÖ Great coverage, keep it up!";
                      else if (lines >= 75) lines_insight="‚ö†Ô∏è Good coverage, but improvements are possible.";
                      else lines_insight="‚ùå Coverage needs improvement.";

                      printf "| Statements  | %s       | %s |\n", $2, statements_insight;
                      printf "| Branches    | %s       | %s |\n", $3, branches_insight;
                      printf "| Functions   | %s       | %s |\n", $4, functions_insight;
                      printf "| Lines       | %s       | %s |\n", $5, lines_insight;
                    }')

                  echo "COVERAGE<<EOF" >> $GITHUB_ENV
                  echo "$COVERAGE_OUTPUT" >> $GITHUB_ENV
                  echo "EOF" >> $GITHUB_ENV

            - name: Post test summary and coverage to PR
              if: ${{ github.event_name == 'pull_request' }}
              uses: marocchino/sticky-pull-request-comment@v2
              with:
                  header: 'üöÄ Node.js ${{ matrix.node-version }} - ${{ env.TEST_STATUS }}'
                  message: |
                      # üöÄ Node.js ${{ matrix.node-version }} - ${{ env.TEST_STATUS }}

                      ## üõ† **Summary**
                      | Metric         | Value                                   |
                      |----------------|-----------------------------------------|
                      | **Total Tests**| üß™ ${{ env.TEST_SUMMARY_TOTAL }}        |
                      | **Passed**     | ‚úÖ ${{ env.TEST_SUMMARY_PASSED }}       |
                      | **Failed**     | ‚ùå ${{ env.TEST_SUMMARY_FAILED }}       |
                      | **Pass Rate**  | **${{ env.TEST_SUMMARY_PASS_RATE }}** |

                      ## üìä **Coverage Details**
                      <details>
                      <summary>üîç Click to expand</summary>

                      ### Coverage Summary with Insights
                      | Metric      | Coverage | Insights                          |
                      |-------------|----------|-----------------------------------|
                      ${{ env.COVERAGE }}
                      > **Note:** Coverage insights are calculated based on the current thresholds.  
                      > Consider adjusting thresholds for stricter validation and enhanced quality checks if needed.

                      </details>

                      ---
                      > *Generated automatically by CI Pipeline*
                  operationType: upsert

            - name: Upload full test output as artifact
              if: ${{ github.event_name == 'pull_request' }}
              uses: actions/upload-artifact@v3
              with:
                  name: full-test-output-${{ matrix.node-version }}
                  path: test-results.json

    lint:
        needs: check-secrets
        runs-on: ubuntu-latest
        strategy:
            matrix:
                node-version: [18, 20, 22, 24]
        steps:
            - uses: actions/checkout@v3

            - name: Set up Node.js ${{ matrix.node-version }}
              uses: actions/setup-node@v3
              with:
                  node-version: ${{ matrix.node-version }}

            - name: Cache Node.js modules
              uses: actions/cache@v3
              with:
                  path: ~/.npm
                  key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-node-${{ matrix.node-version }}-

            - name: Check for package-lock and package.json consistency
              id: check-lockfile
              run: |
                  if ! npm ci --dry-run > /dev/null 2>&1; then
                      echo "Lockfile and package.json are not in sync. Using 'npm install' instead."
                      echo "USE_INSTALL=true" >> $GITHUB_ENV
                  else
                      echo "USE_INSTALL=false" >> $GITHUB_ENV
                  fi

            - name: Install dependencies
              run: |
                  if [ "$USE_INSTALL" = "true" ]; then
                      npm install
                  else
                      npm ci
                  fi

            - name: Run linting
              id: eslint-check
              run: npm run lint -- --format json --output-file eslint-results.json
              continue-on-error: true

            - name: Generate Lint Summary
              id: lint-summary
              run: |
                  ESLINT_OUTPUT=$(cat eslint-results.json)

                  ERROR_COUNT=$(echo "$ESLINT_OUTPUT" | jq '[.[] | .messages[] | select(.severity == 2)] | length')
                  WARNING_COUNT=$(echo "$ESLINT_OUTPUT" | jq '[.[] | .messages[] | select(.severity == 1)] | length')

                  DETAILS=$(echo "$ESLINT_OUTPUT" | jq -r '[.[] | select((.messages | length > 0) or (.suppressedMessages | length > 0)) | {
                    file: (.filePath | sub("^.*/"; "")),
                    messages: (
                      [.messages[] | {
                        severity: (if (.severity) == 2 then "üö® Error" else "‚ö†Ô∏è Warning" end),
                        line: .line,
                        column: .column,
                        message: .message,
                        ruleId: .ruleId
                      }] +
                      [.suppressedMessages[] | {
                        severity: "‚ö†Ô∏è Suppressed",
                        line: .line,
                        column: .column,
                        message: .message,
                        ruleId: .ruleId
                      }]
                    )
                  }] | map(
                    "#### File: `\(.file)`\n" +
                    (.messages | map("- \(.severity) on line \(.line), column \(.column): \(.message) (\(.ruleId))") | join("\n"))
                  ) | join("\n\n")' | sed 's/%/%25/g; s/\n/%0A/g; s/\r/%0D/g')

                  echo "LINT_ERRORS=$ERROR_COUNT" >> $GITHUB_ENV
                  echo "LINT_WARNINGS=$WARNING_COUNT" >> $GITHUB_ENV
                  echo "LINT_DETAILS<<EOF" >> $GITHUB_ENV
                  echo "$DETAILS" >> $GITHUB_ENV
                  echo "EOF" >> $GITHUB_ENV

                  if [ "$ERROR_COUNT" -gt 0 ]; then
                    echo "LINT_STATUS=üö® Issues Found" >> $GITHUB_ENV
                  else
                    echo "LINT_STATUS=‚úÖ No Issues" >> $GITHUB_ENV
                  fi

            - name: Post ESLint results to PR
              if: ${{ github.event_name == 'pull_request' }}
              uses: marocchino/sticky-pull-request-comment@v2
              with:
                  header: 'üìè Node.js ${{ matrix.node-version }} - ${{ env.LINT_STATUS }}'
                  message: |
                      # üìè Node.js ${{ matrix.node-version }} - ${{ env.LINT_STATUS }}

                      ## üõ† **Lint Summary**
                      | Metric         | Count                                   |
                      |----------------|-----------------------------------------|
                      | **Errors**     | üö® ${{ env.LINT_ERRORS }}              |
                      | **Warnings**   | ‚ö†Ô∏è ${{ env.LINT_WARNINGS }}            |

                      ## üîç **Detailed Linting Report**
                      <details>
                      <summary>üîç Click to expand</summary>

                      ### File-by-File Insights
                      ${{ env.LINT_DETAILS }}
                      ---
                      > **üîß Pro-Tip:**  
                      > Suppressed errors should be reviewed and justified to maintain clean code.  
                      > Consider fixing warnings to improve maintainability.

                      > **Note:** Linting results help maintain code quality and ensure project standards are met.

                      </details>

                      ---
                      > *Generated automatically by CI pipeline.*

    audit:
        needs: check-secrets
        if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - name: Set up Node.js 22
              uses: actions/setup-node@v3
              with:
                  node-version: '22'
            - name: Cache Node.js modules
              uses: actions/cache@v3
              with:
                  path: ~/.npm
                  key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-node-
            - name: Check for package-lock and package.json consistency
              id: check-lockfile
              run: |
                  if ! npm ci --dry-run > /dev/null 2>&1; then
                      echo "Lockfile and package.json are not in sync. Using 'npm install' instead."
                      echo "USE_INSTALL=true" >> $GITHUB_ENV
                  else
                      echo "USE_INSTALL=false" >> $GITHUB_ENV
                  fi

            - name: Install dependencies
              run: |
                  if [ "$USE_INSTALL" = "true" ]; then
                      npm install
                  else
                      npm ci
                  fi

            - name: Run audit
              id: npm-audit
              run: npm audit --production --json > npm-audit-results.json
              continue-on-error: true

            - name: Check for audit errors
              id: check-audit-errors
              if: ${{ github.event_name == 'pull_request' }}
              run: |
                  NPM_AUDIT_OUTPUT=$(cat npm-audit-results.json)

                  INFO=$(echo "$NPM_AUDIT_OUTPUT" | jq '.metadata.vulnerabilities.info')
                  LOW=$(echo "$NPM_AUDIT_OUTPUT" | jq '.metadata.vulnerabilities.low')
                  MODERATE=$(echo "$NPM_AUDIT_OUTPUT" | jq '.metadata.vulnerabilities.moderate')
                  HIGH=$(echo "$NPM_AUDIT_OUTPUT" | jq '.metadata.vulnerabilities.high')
                  CRITICAL=$(echo "$NPM_AUDIT_OUTPUT" | jq '.metadata.vulnerabilities.critical')
                  TOTAL=$(echo "$NPM_AUDIT_OUTPUT" | jq '.metadata.vulnerabilities.total')

                  PROD=$(echo "$NPM_AUDIT_OUTPUT" | jq '.metadata.dependencies.prod')
                  DEV=$(echo "$NPM_AUDIT_OUTPUT" | jq '.metadata.dependencies.dev')
                  OPTIONAL=$(echo "$NPM_AUDIT_OUTPUT" | jq '.metadata.dependencies.optional')
                  PEER=$(echo "$NPM_AUDIT_OUTPUT" | jq '.metadata.dependencies.peer')
                  PEER_OPTIONAL=$(echo "$NPM_AUDIT_OUTPUT" | jq '.metadata.dependencies.peerOptional')
                  DEP_TOTAL=$(echo "$NPM_AUDIT_OUTPUT" | jq '.metadata.dependencies.total')

                  echo "NPM_AUDIT_INFO=$INFO" >> $GITHUB_ENV
                  echo "NPM_AUDIT_LOW=$LOW" >> $GITHUB_ENV
                  echo "NPM_AUDIT_MODERATE=$MODERATE" >> $GITHUB_ENV
                  echo "NPM_AUDIT_HIGH=$HIGH" >> $GITHUB_ENV
                  echo "NPM_AUDIT_CRITICAL=$CRITICAL" >> $GITHUB_ENV
                  echo "NPM_AUDIT_TOTAL=$TOTAL" >> $GITHUB_ENV

                  echo "NPM_AUDIT_PROD=$PROD" >> $GITHUB_ENV
                  echo "NPM_AUDIT_DEV=$DEV" >> $GITHUB_ENV
                  echo "NPM_AUDIT_OPTIONAL=$OPTIONAL" >> $GITHUB_ENV
                  echo "NPM_AUDIT_PEER=$PEER" >> $GITHUB_ENV
                  echo "NPM_AUDIT_PEER_OPTIONAL=$PEER_OPTIONAL" >> $GITHUB_ENV
                  echo "NPM_AUDIT_DEP_TOTAL=$DEP_TOTAL" >> $GITHUB_ENV
                  if [[ $CRITICAL -gt 0 || $HIGH -gt 0 ]]; then
                    STATUS_ICON="üî¥"
                    STATUS_MESSAGE="**Critical vulnerabilities found! Immediate action required.**"
                  elif [[ $MODERATE -gt 0 || $LOW -gt 0 ]]; then
                    STATUS_ICON="üü°"
                    STATUS_MESSAGE="**Some vulnerabilities detected. Please review the details below.**"
                  else
                    STATUS_ICON="üü¢"
                    STATUS_MESSAGE="**No vulnerabilities found. Excellent job keeping dependencies secure! üéâ**"
                  fi

                  echo "NPM_AUDIT_STATUS_ICON=$STATUS_ICON" >> $GITHUB_ENV
                  if [[ $TOTAL -gt 0 ]]; then
                    echo "NPM_AUDIT_HAS_ERRORS=true" >> $GITHUB_ENV
                    echo "AUDIT_STATUS_MESSAGE=üö® **Vulnerabilities detected!** Please address the issues listed above." >> $GITHUB_ENV
                  else
                    echo "NPM_AUDIT_HAS_ERRORS=false" >> $GITHUB_ENV
                    echo "AUDIT_STATUS_MESSAGE=üöÄ **No vulnerabilities found.** Excellent job keeping dependencies secure! üéâ" >> $GITHUB_ENV
                  fi

            - name: Post npm audit results to PR
              if: ${{ github.event_name == 'pull_request' }}
              uses: marocchino/sticky-pull-request-comment@v2
              with:
                  header: üîí NPM Audit Findings
                  message: |
                      # üîí **NPM Audit Findings**

                      ## üö¶ **Vulnerability Summary**
                      | **Severity**     | **Count**                           |
                      |------------------|-------------------------------------|
                      | üü¢ **Info**      | `${{ env.NPM_AUDIT_INFO }}`         |
                      | üü° **Low**       | `${{ env.NPM_AUDIT_LOW }}`          |
                      | üü† **Moderate**  | `${{ env.NPM_AUDIT_MODERATE }}`     |
                      | üî¥ **High**      | `${{ env.NPM_AUDIT_HIGH }}`         |
                      | üî• **Critical**  | `${{ env.NPM_AUDIT_CRITICAL }}`     |

                      ## ${{ env.NPM_AUDIT_STATUS_ICON }} **Status**
                      ${{ env.AUDIT_STATUS_MESSAGE }}

                      ---

                      ## üì¶ **Dependency Overview**
                      | **Dependency Type** | **Count**                        |
                      |---------------------|----------------------------------|
                      | üèóÔ∏è **Production**   | `${{ env.NPM_AUDIT_PROD }}`      |
                      | üõ†Ô∏è **Development**  | `${{ env.NPM_AUDIT_DEV }}`       |
                      | üé≤ **Optional**     | `${{ env.NPM_AUDIT_OPTIONAL }}`  |
                      | ü§ù **Peer**         | `${{ env.NPM_AUDIT_PEER }}`      |
                      | ü§ù **Peer Optional**| `${{ env.NPM_AUDIT_PEER_OPTIONAL }}` |
                      | üì¶ **Total**        | `${{ env.NPM_AUDIT_DEP_TOTAL }}` |

                      ---
                      > üîó *Generated automatically by the CI pipeline to keep your dependencies secure.*
                  operationType: upsert

    build:
        name: 'Build & Package (CI)'
        needs: [test, lint]
        if: github.event_name != 'release'
        runs-on: ubuntu-latest
        timeout-minutes: 15
        steps:
            - name: 'Checkout Code'
              uses: actions/checkout@v4
              
            - name: 'Setup Node.js'
              uses: actions/setup-node@v4
              with:
                  node-version: '22'
                  cache: 'npm'
            - name: 'Install Dependencies'
              run: |
                  if npm ci --dry-run > /dev/null 2>&1; then
                      echo "üì¶ Installing with npm ci..."
                      npm ci
                  else
                      echo "‚ö†Ô∏è Fallback to npm install"
                      npm install
                  fi
            - name: 'Build Package'
              run: |
                  echo "üèóÔ∏è Building package..."
                  npm run build
                  
                  if [ ! -d "dist" ] || [ -z "$(ls -A dist/)" ]; then
                      echo "‚ùå Build failed - dist directory is empty"
                      exit 1
                  fi
                  
                  echo "‚úÖ Build completed successfully"
            - name: 'Upload Build Artifacts'
              if: github.event_name == 'push'
              uses: actions/upload-artifact@v4
              with:
                  name: build-artifacts-${{ github.run_id }}
                  path: dist/
                  retention-days: 7

    # ============================================================================
    # RELEASE PIPELINE (triggered by GitHub GUI releases)
    # ============================================================================
    
    release-build:
        name: 'Release Build & Package'
        needs: [version-check]
        if: github.event_name == 'release'
        runs-on: ubuntu-latest
        timeout-minutes: 15
        steps:
            - name: 'Checkout Code'
              uses: actions/checkout@v4

            - name: 'Setup Node.js'
              uses: actions/setup-node@v4
              with:
                  node-version: '22'
                  cache: 'npm'

            - name: 'Install Dependencies'
              run: |
                  if npm ci --dry-run > /dev/null 2>&1; then
                      echo "üì¶ Installing with npm ci..."
                      npm ci
                  else
                      echo "‚ö†Ô∏è Fallback to npm install"
                      npm install
                  fi

            - name: 'Run Tests'
              run: |
                  echo "üß™ Running tests for release..."
                  npm test

            - name: 'Run Linting'
              run: |
                  echo "üìè Running linting for release..."
                  npm run lint

            - name: 'Build Package'
              run: |
                  echo "üèóÔ∏è Building release package..."
                  npm run build
                  
                  if [ ! -d "dist" ] || [ -z "$(ls -A dist/)" ]; then
                      echo "‚ùå Build failed - dist directory is empty"
                      exit 1
                  fi

            - name: 'Prepare NPM Package'
              run: |
                  echo "üì¶ Preparing package for npm..."
                  
                  # Verify required build files exist
                  REQUIRED_FILES=("odata-builder.js" "odata-builder.esm.js" "odata-builder.d.ts")
                  for file in "${REQUIRED_FILES[@]}"; do
                      if [ ! -f "dist/$file" ]; then
                          echo "‚ùå Required build file missing: dist/$file"
                          exit 1
                      fi
                  done
                  echo "‚úÖ All required build files present"
                  
                  # Copy essential files
                  cp package.json dist/package.json
                  cp README.md dist/README.md
                  
                  # Copy LICENSE if it exists
                  if [ -f LICENSE ]; then
                      cp LICENSE dist/LICENSE
                  fi
                  
                  # Update package.json with correct paths
                  cd dist
                  jq '.main = "odata-builder.js"' package.json > tmp.json && mv tmp.json package.json
                  jq '.module = "odata-builder.esm.js"' package.json > tmp.json && mv tmp.json package.json
                  jq '.types = "odata-builder.d.ts"' package.json > tmp.json && mv tmp.json package.json
                  
                  # Remove dev-only fields
                  jq 'del(.devDependencies, .scripts.dev, .scripts.build)' package.json > tmp.json && mv tmp.json package.json
                  
                  # Validate final package.json
                  if ! jq empty package.json 2>/dev/null; then
                      echo "‚ùå Generated package.json is invalid JSON"
                      exit 1
                  fi
                  echo "‚úÖ Package preparation completed successfully"

            - name: 'Upload Release Artifacts'
              uses: actions/upload-artifact@v4
              with:
                  name: npm-package-${{ github.run_id }}
                  path: dist/
                  retention-days: 30

    request-release-approval:
        name: 'Request NPM Publication Approval'
        needs: [release-build, version-check]
        if: github.event_name == 'release'
        runs-on: ubuntu-latest
        environment: 
            name: production
            url: https://www.npmjs.com/package/odata-builder
        timeout-minutes: 60
        steps:
            - name: 'Awaiting Approval for NPM Publication'
              run: |
                  echo "üîí NPM Publication requires manual approval"
                  echo ""
                  echo "üìã Release Details:"
                  echo "   Version: v${{ needs.version-check.outputs.version }}"
                  echo "   Release URL: ${{ github.event.release.html_url }}"
                  echo ""
                  echo "‚úÖ Please review the build artifacts and approve to publish to NPM"

    publish-to-npm:
        name: 'Publish to NPM'
        needs: [request-release-approval, version-check]
        if: github.event_name == 'release'
        runs-on: ubuntu-latest
        timeout-minutes: 10
        environment:
            name: npm-registry
            url: https://www.npmjs.com/package/odata-builder
        steps:
            - name: 'Setup Node.js for NPM'
              uses: actions/setup-node@v4
              with:
                  node-version: '22'
                  registry-url: 'https://registry.npmjs.org'

            - name: 'Download Release Package'
              uses: actions/download-artifact@v4
              with:
                  name: npm-package-${{ github.run_id }}
                  path: ./package

            - name: 'Verify Package Contents'
              run: |
                  cd package
                  echo "üì¶ Package contents:"
                  ls -la
                  
                  echo ""
                  echo "üìÑ package.json:"
                  cat package.json | jq '.'

            - name: 'Publish to NPM'
              run: |
                  cd package
                  
                  # Validate package before publishing
                  echo "üîç Running final package validation..."
                  npm pack --dry-run
                  
                  # Check if version already exists on NPM
                  CURRENT_VERSION="${{ needs.version-check.outputs.version }}"
                  if npm view "odata-builder@$CURRENT_VERSION" version >/dev/null 2>&1; then
                      echo "‚ùå Version $CURRENT_VERSION already exists on NPM!"
                      echo "Please increment the version number."
                      exit 1
                  fi
                  
                  echo "üöÄ Publishing stable release v$CURRENT_VERSION to NPM..."
                  npm publish --access public
                  echo "‚úÖ Published as stable release!"
                  echo "üì• Install with: npm install odata-builder"
                  
                  # Verify publication succeeded
                  sleep 5
                  if npm view "odata-builder@$CURRENT_VERSION" version >/dev/null 2>&1; then
                      echo "‚úÖ Publication verified on NPM registry"
                  else
                      echo "‚ö†Ô∏è Could not verify publication (may take a few minutes to appear)"
                  fi
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

            - name: 'Post Publication Summary'
              run: |
                  echo "üéâ Publication completed successfully!"
                  echo ""
                  echo "üì¶ Package: odata-builder@${{ needs.version-check.outputs.version }}"
                  echo "üîó NPM: https://www.npmjs.com/package/odata-builder"
                  echo "üìö GitHub: ${{ github.event.release.html_url }}"
                  echo "üìñ Docs: https://github.com/${{ github.repository }}"

    # ============================================================================
    # PIPELINE STATUS
    # ============================================================================
    
    pipeline-status:
        name: 'Pipeline Status'
        if: always()
        runs-on: ubuntu-latest
        timeout-minutes: 5
        needs: [pr-checks, check-secrets, test, lint, audit, build, version-check, release-build, publish-to-npm]
        steps:
            - name: 'Report Pipeline Status'
              run: |
                  echo "üìä CI/CD Pipeline Summary"
                  echo "========================="
                  echo ""
                  echo "Event: ${{ github.event_name }}"
                  echo "Ref: ${{ github.ref }}"
                  echo ""
                  
                  # Determine pipeline type
                  if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
                      PIPELINE_TYPE="üî• Main Branch (Full Pipeline)"
                  elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
                      PIPELINE_TYPE="üîç Pull Request (Full Pipeline)"
                  elif [[ "${{ github.event_name }}" == "release" ]]; then
                      PIPELINE_TYPE="üöÄ Release Pipeline"
                  else
                      PIPELINE_TYPE="‚ö° Feature Branch (Fast Pipeline)"
                  fi
                  
                  echo "Pipeline Type: $PIPELINE_TYPE"
                  echo ""
                  
                  # Check job statuses
                  if [[ "${{ github.event_name }}" == "pull_request" ]]; then
                      echo "üîç Pull Request Pipeline Results:"
                      echo "PR Checks: ${{ needs.pr-checks.result }}"
                  fi
                  
                  if [[ "${{ github.event_name }}" != "release" ]]; then
                      echo "üîÑ CI Pipeline Results:"
                      echo "Security Check: ${{ needs.check-secrets.result }}"
                      echo "Tests: ${{ needs.test.result }}"  
                      echo "Linting: ${{ needs.lint.result }}"
                      if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.event_name }}" == "pull_request" ]]; then
                          echo "Security Audit: ${{ needs.audit.result }}"
                      else
                          echo "Security Audit: ‚è≠Ô∏è Skipped (feature branch optimization)"
                      fi
                      echo "Build: ${{ needs.build.result }}"
                  fi
                  
                  if [[ "${{ github.event_name }}" == "release" ]]; then
                      echo "üöÄ Release Pipeline Results:"
                      echo "Version Check: ${{ needs.version-check.result }}"
                      echo "Release Build: ${{ needs.release-build.result }}"
                      echo "NPM Publication: ${{ needs.publish-to-npm.result }}"
                  fi
                  
                  echo ""
                  echo "‚úÖ Pipeline completed"
